# Base image
FROM python:3.11.8-slim

# Set the working directory to /app
WORKDIR /app

# 首先复制依赖相关文件，这样只有这些文件变化时才会重新安装依赖
COPY requirements.txt pyproject.toml ./

# Install build dependencies
RUN rm -f /etc/apt/sources.list.d/* && \
    echo "deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm main contrib non-free" > /etc/apt/sources.list && \
    echo "deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-updates main contrib non-free" >> /etc/apt/sources.list && \
    echo "deb https://mirrors.tuna.tsinghua.edu.cn/debian-security bookworm-security main contrib non-free" >> /etc/apt/sources.list && \
    # 强制使用IPv4
    echo 'Acquire::ForceIPv4 "true";' > /etc/apt/apt.conf.d/99force-ipv4 && \
    apt-get clean && \
    apt-get update -o Acquire::Check-Valid-Until=false && \
    apt-get install -y gcc python3-dev curl gnupg && \
    # 安装 Node.js
    curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg && \
    echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_18.x nodistro main" | tee /etc/apt/sources.list.d/nodesource.list && \
    apt-get update && \
    apt-get install -y nodejs && \
    # 设置npm淘宝镜像
    npm config set registry https://registry.npmmirror.com && \
    apt-get upgrade -y && \
    rm -rf /var/lib/apt/lists/* && \
    # 使用清华镜像源加速pip安装
    pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple && \
    pip install --upgrade pip && \
    pip install build && \
    # 预先安装依赖
    pip install -r requirements.txt && \
    pip install redisvl==0.0.7 --no-deps && \
    pip uninstall jwt PyJWT -y && \
    pip install PyJWT==2.9.0

# 设置 Prisma 镜像
ENV PRISMA_ENGINES_MIRROR=https://registry.npmmirror.com/-/binary/prisma
ENV NPM_CONFIG_REGISTRY=https://registry.npmmirror.com

# 复制构建UI所需的文件
COPY docker/build_admin_ui.sh docker/
COPY ui/ ui/

# Build Admin UI (这个脚本会安装 Node.js)
RUN chmod +x docker/build_admin_ui.sh && ./docker/build_admin_ui.sh

# 复制其余源代码
COPY . .

# Build the package
RUN rm -rf dist/* && python -m build && \
    pip install dist/*.whl

# Generate prisma client
RUN npm install -g prisma@5.4.2 && \
    prisma generate

# 设置入口脚本权限
RUN chmod +x docker/entrypoint.sh

EXPOSE 4000/tcp

ENTRYPOINT ["litellm"]

# Append "--detailed_debug" to the end of CMD to view detailed debug logs 
CMD ["--port", "4000"]
